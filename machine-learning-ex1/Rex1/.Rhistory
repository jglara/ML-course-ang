data1 <- read.csv("ex1data1.txt")
data1[,1]
data1 <- read.csv("ex1data1.txt",header = F)
data1[,1]
y <- data1[,2]
length(X)
X <- data1[,1]
length(X)
plot(X,y)
repeat(1,10)
rep(0,3)
cbind(X, rep(1,length(X)))
X <- cbind(rep(1,m), X)
m<-length(m)
m<-length(m)
X <- cbind(rep(1,m), X)
m<-length(X)
X <- cbind(rep(1,m), X)
head(X)
theta <- rep(0,2)
matrix(2,1, rep(0,2))
matrix(rep(0,2),2,1)
t <- matrix(rep(0,2),2,1)
t <- matrix(rep(0,length(X)),length(X),1)
t
X %*% t
t <- matrix(rep(0,2*length(X)),length(X),2)
X %*% t
size(X)
X
theta <- matrix(rep(0,2),2,1)
theta
X %*% theta
theta <- matrix(rep(1,2),2,1)
X %*% theta
h <- X %*% theta
h - y
(h - y) ^2
(h - y)[0]
(h - y)[1]
(h - y)[1] ^2
((h - y) ^2)[1]
computeCost <- function(X,y,theta) {
h <- X %*% theta
J <- ((h - y) ^ 2) / ( 2 * length(y))
}
J <- computeCost(X,y,theta)
J
((h - y) ^2 / (2*m))
sum(((h - y) ^2 / (2*m)))
### ComputeCost
computeCost <- function(X,y,theta) {
h <- X %*% theta
J <- sum( ((h - y) ^ 2) / ( 2 * length(y)) )
}
### ComputeCost
computeCost <- function(X,y,theta) {
h <- X %*% theta
J <- sum( ((h - y) ^ 2) / ( 2 * length(y)) )
}
### GradientDescent
#####
data1 <- read.csv("ex1data1.txt",header = F)
X <- data1[,1]
y <- data[,2]
m<-length(X)
plot(X,y)
X <- cbind(rep(1,m), X)
theta <- matrix(rep(0,2),2,1)
iterations <- 1500
alpha <- 0.01
J <- computeCost(X,y,theta)
print J
### ComputeCost
computeCost <- function(X,y,theta) {
h <- X %*% theta
J <- sum( ((h - y) ^ 2) / ( 2 * length(y)) )
}
### GradientDescent
#####
data1 <- read.csv("ex1data1.txt",header = F)
X <- data1[,1]
y <- data[,2]
m<-length(X)
plot(X,y)
X <- cbind(rep(1,m), X)
theta <- matrix(rep(0,2),2,1)
iterations <- 1500
alpha <- 0.01
J <- computeCost(X,y,theta)
print(J)
print(computeCost(X,y,matrix([-1,2],2,1))))
[1,2]
(1,2)
[1 2]
l<-[1,2,3]
print(computeCost(X,y,matrix(c(-1,2),2,1))))
matrix(c(-1,2),2,1))
matrix(c(-1,2),2,1)
print(computeCost(X,y,matrix(c(-1,2),2,1)))
X %*% theta
t(X %*% theta)
J_history <- rep(0,100)
J_history[1]
### GradientDescent
gradientDescent <- function(X,y,theta,alpha,iterations){
m <- length(y)
J_history <- rep(0,iterations)
for (i in 1:iterations) {
d <- (X %*% theta) - y
d <- (t(d) %*% X) * (alpha/m)
theta <- theta - d
J_history[i] <- computeCost(X,y, theta)
}
return theta,J_history
}
gradientDescent <- function(X,y,theta,alpha,iterations){
m <- length(y)
J_history <- rep(0,iterations)
for (i in 1:iterations) {
d <- (X %*% theta) - y
d <- (t(d) %*% X) * (alpha/m)
theta <- theta - d
J_history[i] <- computeCost(X,y, theta)
}
return (theta,J_history)
}
theta <- gradientDescent(X,y,theta, alpha, iterations)
X %*% theta
(X %*% theta) - y
d <- (X %*% theta) - y
t(d)
t(d) %*% X
(t(d) %*% X ) * (alpha/m)
d <- (t(d) %*% X ) * (alpha/m)
theta - d
theta
gradientDescent <- function(X,y,theta,alpha,iterations){
m <- length(y)
J_history <- rep(0,iterations)
for (i in 1:iterations) {
d <- (X %*% theta) - y
d <- (t(d) %*% X) * (alpha/m)
theta <- theta - t(d)
J_history[i] <- computeCost(X,y, theta)
}
return (theta,J_history)
}
theta <- gradientDescent(X,y,theta, alpha, iterations)
theta,J_histoty <- gradientDescent(X,y,theta, alpha, iterations)
(theta,J_histoty) <- gradientDescent(X,y,theta, alpha, iterations)
x <- gradientDescent(X,y,theta, alpha, iterations)
c(X,y)
list [1,2]
list([1,2])
list(1,2)
list(X,y)
gradientDescent <- function(X,y,theta,alpha,iterations){
m <- length(y)
J_history <- rep(0,iterations)
for (i in 1:iterations) {
d <- (X %*% theta) - y
d <- (t(d) %*% X) * (alpha/m)
theta <- theta - t(d)
J_history[i] <- computeCost(X,y, theta)
}
list(theta,J_history)
}
list[theta, J_history] <- gradientDescent(X,y,theta, alpha, iterations)
list(theta, J_history) <- gradientDescent(X,y,theta, alpha, iterations)
ret<-gradientDescent(X,y,theta, alpha, iterations)
ret[[0]]
ret[0]
ret[[1]]
ret[[2]]
ret[[1]]
plot(X[,2], X%*%theta)
X%*%theta
theta <- ret[[1]]
X%*%theta
plot(X[,2], X%*%theta)
predict1 <- c(1,3.5) * theta
predict1
predict1 <- c(1,3.5) %*% theta
predict1
X%*%theta
plot(X[,2], (X%*%theta))
plot(X[,2]
)
X%*%theta
View(X)
h <- X %*% theta
plot(X[,2], h)
plot(X[,2], h[,1])
m<-length(X)
cbind(X[,2], X %*% theta)
t <- cbind(X[,2], X %*% theta)
plot (t)
plot (t[,1], t[,2])
plot (t[,1], t[,2])
